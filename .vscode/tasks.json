{
  // VS Code tasks delegate to Makefile as the source of truth to prevent configuration drift.
  // To modify build/test/lint commands, update the Makefile instead of editing tasks here.
  // All tasks use problemMatcher: [] to avoid VS Code's default matchers.
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Bootstrap venv",
      "type": "shell",
      "command": "bash -lc 'test -x .venv/bin/python || (python3 -m venv .venv && source .venv/bin/activate && pip install -U pip && (pip install -e . || true) && (pip install -r requirements-dev.txt || true))'",
      "options": { "cwd": "${workspaceFolder}" },
      "problemMatcher": []
    },

    {
      "label": "Run Tests",
      "type": "shell",
      "command": "bash -lc 'source .venv/bin/activate && make unit'",
      "options": { "cwd": "${workspaceFolder}" },
      "group": "test",
      "problemMatcher": [],
      "dependsOn": ["Bootstrap venv"]
    },
    {
      "label": "Run E2E",
      "type": "shell",
      "command": "bash -lc 'source .venv/bin/activate && make e2e'",
      "options": { "cwd": "${workspaceFolder}" },
      "group": "test",
      "problemMatcher": [],
      "dependsOn": ["Bootstrap venv"]
    },

    {
      "label": "Coverage (HTML)",
      "type": "shell",
      "command": "bash -lc 'source .venv/bin/activate && pytest --maxfail=1 --disable-warnings -q --cov=loquilex --cov-report=term-missing --cov-report=html:coverage_html'",
      "options": { "cwd": "${workspaceFolder}" },
      "problemMatcher": [],
      "dependsOn": ["Bootstrap venv"]
    },

    {
      "label": "Lint (ruff)",
      "type": "shell",
      "command": "bash -lc 'source .venv/bin/activate && make lint'",
      "options": { "cwd": "${workspaceFolder}" },
      "problemMatcher": [],
      "dependsOn": ["Bootstrap venv"]
    },
    {
      "label": "Format (black)",
      "type": "shell",
      "command": "bash -lc 'source .venv/bin/activate && make fmt'",
      "options": { "cwd": "${workspaceFolder}" },
      "problemMatcher": [],
      "dependsOn": ["Bootstrap venv"]
    },
    {
      "label": "Typecheck (mypy)",
      "type": "shell",
      "command": "bash -lc 'source .venv/bin/activate && make typecheck'",
      "options": { "cwd": "${workspaceFolder}" },
      "problemMatcher": [],
      "dependsOn": ["Bootstrap venv"]
    },
    {
      "label": "Safety (vuln scan)",
      "type": "shell",
      "command": "bash -lc 'source .venv/bin/activate && (safety check || pip install safety && safety check)'",
      "options": { "cwd": "${workspaceFolder}" },
      "problemMatcher": [],
      "dependsOn": ["Bootstrap venv"]
    },

    {
      "label": "Clean pyc/__pycache__",
      "type": "shell",
      "command": "bash -lc \"find . -type d -name '__pycache__' -prune -exec rm -rf {} + ; find . -name '*.py[cod]' -delete\"",
      "options": { "cwd": "${workspaceFolder}" },
      "problemMatcher": []
    },

    {
      "label": "All Checks",
      "type": "shell",
      "command": "bash -lc 'source .venv/bin/activate && make ci'",
      "options": { "cwd": "${workspaceFolder}" },
      "group": { "kind": "build", "isDefault": true },
      "problemMatcher": [],
      "dependsOn": ["Bootstrap venv"]
    },

    // Legacy CI helper tasks retained below
    {
      "label": "Docker CI (CI-identical container run)",
      "type": "shell",
      "command": "make docker-ci",
      "options": { "cwd": "${workspaceFolder}" },
      "group": "test",
      "problemMatcher": []
    },
    {
        "label": "Docker CI Test (GH parity)",
        "type": "shell",
        "command": "make docker-ci-test",
        "group": "test",
        "problemMatcher": []
    },
    {
        "label": "report: dead-code",
        "type": "shell",
        "command": "make",
        "args": ["dead-code-report"],
        "problemMatcher": [],
        "presentation": { "reveal": "always", "panel": "dedicated", "clear": true }
    },
    {
        "label": "clean: artifacts",
        "type": "shell",
        "command": "make",
        "args": ["clean-artifacts"],
        "problemMatcher": [],
        "presentation": { "reveal": "always", "panel": "dedicated", "clear": true }
    },
    {
      "label": "Start Ollama (docker compose up)",
      "type": "shell",
      "command": "docker compose up -d",
      "options": {
        "cwd": "/mnt/c/wsl/docker/ollama"
      },
      "runOptions": {
        "runOn": "folderOpen"
      },
      "problemMatcher": []
    },
    {
      "label": "Stop Ollama (docker stop)",
      "type": "shell",
      "command": "docker stop ollama",
      "problemMatcher": []
    }/*,
    {
      "label": "Remove Ollama (docker rm)",
      "type": "shell",
      "command": "docker rm -f ollama",
      "problemMatcher": []
    }
    */
  ]
}
