<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="0.643" timestamp="2025-09-13T03:32:40.775686+00:00" hostname="runnervmf4ws1"><testcase classname="tests.test_e2e_websocket_api" name="test_e2e_websocket_live_session" time="0.002"><failure message="TypeError: Client.__init__() got an unexpected keyword argument 'app'">@pytest.mark.e2e
    @pytest.mark.asyncio
    async def test_e2e_websocket_live_session():
        """Test end-to-end WebSocket live session with mock ASR engine."""
    
        # Mock environment to avoid requiring real models and audio devices
        test_env = {
            "GF_ASR_MODEL": "tiny.en",  # Use smallest model
            "GF_DEVICE": "cpu",
            "GF_SAVE_AUDIO": "off",
            "LLX_OUT_DIR": "/tmp/loquilex_test",
            "LLX_ALLOWED_ORIGINS": "http://testserver",
        }
    
        with patch.dict(os.environ, test_env):
            # Use FastAPI TestClient to get a test server
&gt;           with TestClient(app) as client:
                 ^^^^^^^^^^^^^^^

tests/test_e2e_websocket_api.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;starlette.testclient.TestClient object at 0x7fe6a10227e0&gt;
app = &lt;fastapi.applications.FastAPI object at 0x7fe6a1402e10&gt;
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -&gt; None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
&gt;       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/starlette/testclient.py:429: TypeError</failure></testcase></testsuite></testsuites>