name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Upgrade pip
        run: python -m pip install -U pip

      - name: Install project dependencies (if present)
        run: |
          if [ -f requirements-ci.txt ]; then pip install -r requirements-ci.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run CI (make target if available, else fallback)
        run: |
          if make -n run-ci-mode >/dev/null 2>&1; then
            make run-ci-mode
          else
            echo "No 'run-ci-mode' target; running minimal pytest fallback"
            python -m pip install pytest >/dev/null
            if find . -type f \( -name "test_*.py" -o -name "*_test.py" \) | grep -q .; then
              pytest -q
            else
              echo "No test files found; skipping pytest."
            fi
          fi

  docs-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install markdown-link-check
        run: npm install --no-save markdown-link-check

      - name: Check links in README and docs
        run: |
          echo "=== Checking links in README.md and docs/ ==="
          FAILED=0
          for file in README.md $(find docs -name "*.md"); do
            echo "Checking $file..."
            output=$(npx markdown-link-check "$file" --config .markdown-link-check.json 2>&1)
            echo "$output"
            if echo "$output" | grep -q "ERROR:.*dead links found"; then
              FAILED=1
            fi
          done
          if [ $FAILED -eq 1 ]; then
            echo "❌ Link check failed: dead links found"
            exit 1
          else
            echo "✅ All links are valid"
          fi
