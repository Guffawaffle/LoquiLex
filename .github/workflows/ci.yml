name: LoquiLex CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black

      - name: Run ruff linter
        run: ruff check . --output-format=github

      - name: Check code formatting with black
        run: black --check .

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy types-requests

      - name: Install package dependencies
        run: |
          pip install -r requirements.txt || echo "Main dependencies optional for type check"
          pip install -r loquilex/api/requirements.txt || echo "API dependencies optional for type check"

      - name: Run mypy type checker
        run: |
          mypy loquilex --ignore-missing-imports --no-strict-optional || echo "Type checking completed with warnings"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg portaudio19-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -r loquilex/api/requirements.txt

      - name: Run unit tests
        env:
          # Use environment variables for test configuration
          GF_ASR_MODEL: "tiny.en"
          GF_DEVICE: "cpu"
          LX_SAVE_AUDIO: "off"
          LX_OUT_DIR: "/tmp/loquilex_test"
        run: |
          python -m pytest tests/ -v --tb=short --maxfail=3 \
            --cov=loquilex --cov-report=xml --cov-report=term-missing \
            --exclude=tests/test_e2e_websocket_api.py

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: success()
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: unit-test-artifacts
          path: |
            .coverage
            coverage.xml
            /tmp/loquilex_test/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt  
          pip install -r loquilex/api/requirements.txt

      - name: Run E2E WebSocket API tests
        env:
          # Test environment configuration
          GF_ASR_MODEL: "tiny.en"
          GF_DEVICE: "cpu"
          LX_SAVE_AUDIO: "off"
          LX_OUT_DIR: "/tmp/loquilex_e2e_test"
          LLX_ALLOWED_ORIGINS: "http://testserver"
        run: |
          python -m pytest tests/test_e2e_websocket_api.py -v --tb=short

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-artifacts
          path: |
            /tmp/loquilex_e2e_test/
            *.log

  integration:
    name: Integration Check
    runs-on: ubuntu-latest
    needs: [lint, type-check, unit-tests, e2e-tests]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" || 
                "${{ needs.type-check.result }}" == "failure" || 
                "${{ needs.unit-tests.result }}" == "failure" || 
                "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "One or more jobs failed"
            exit 1
          else
            echo "All jobs completed successfully"
          fi